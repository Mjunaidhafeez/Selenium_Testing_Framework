{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 105\nCurrent browser version is 107.0.5304.106 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x008ADF13+2219795]\n\tOrdinal0 [0x00842841+1779777]\n\tOrdinal0 [0x0075423D+803389]\n\tOrdinal0 [0x007764AC+943276]\n\tOrdinal0 [0x007719F0+924144]\n\tOrdinal0 [0x0076F179+913785]\n\tOrdinal0 [0x007A36B9+1128121]\n\tOrdinal0 [0x007A331A+1127194]\n\tOrdinal0 [0x0079E616+1107478]\n\tOrdinal0 [0x00777F89+950153]\n\tOrdinal0 [0x00778F56+954198]\n\tGetHandleVerifier [0x00BA2CB2+3040210]\n\tGetHandleVerifier [0x00B92BB4+2974420]\n\tGetHandleVerifier [0x00946A0A+565546]\n\tGetHandleVerifier [0x00945680+560544]\n\tOrdinal0 [0x00849A5C+1808988]\n\tOrdinal0 [0x0084E3A8+1827752]\n\tOrdinal0 [0x0084E495+1827989]\n\tOrdinal0 [0x008580A4+1867940]\n\tBaseThreadInitThunk [0x7614FEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E47BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E47B8E+238]", "trace": "browser = 'chrome'\n\n    @pytest.fixture()\n    def setup(browser):\n    \n        if browser=='chrome':\n            service_obj = Service('H:\\\\Selenium_Test_Project\\Driver\\chromedriver.exe')\n            print('launching chrome browser')\n>           driver = webdriver.Chrome()\n\ntestCases\\conftest.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:92: in __init__\n    super().__init__(\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000253A6A8F9D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E47BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E47B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 105\nE       Current browser version is 107.0.5304.106 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x008ADF13+2219795]\nE       \tOrdinal0 [0x00842841+1779777]\nE       \tOrdinal0 [0x0075423D+803389]\nE       \tOrdinal0 [0x007764AC+943276]\nE       \tOrdinal0 [0x007719F0+924144]\nE       \tOrdinal0 [0x0076F179+913785]\nE       \tOrdinal0 [0x007A36B9+1128121]\nE       \tOrdinal0 [0x007A331A+1127194]\nE       \tOrdinal0 [0x0079E616+1107478]\nE       \tOrdinal0 [0x00777F89+950153]\nE       \tOrdinal0 [0x00778F56+954198]\nE       \tGetHandleVerifier [0x00BA2CB2+3040210]\nE       \tGetHandleVerifier [0x00B92BB4+2974420]\nE       \tGetHandleVerifier [0x00946A0A+565546]\nE       \tGetHandleVerifier [0x00945680+560544]\nE       \tOrdinal0 [0x00849A5C+1808988]\nE       \tOrdinal0 [0x0084E3A8+1827752]\nE       \tOrdinal0 [0x0084E495+1827989]\nE       \tOrdinal0 [0x008580A4+1867940]\nE       \tBaseThreadInitThunk [0x7614FEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E47BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E47B8E+238]\n\nC:\\Users\\HP\\PycharmProjects\\Selenium_Test_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: SessionNotCreatedException"}, "start": 1668079178842, "stop": 1668079178842, "uuid": "6f3786fe-a0ba-403a-b3e8-d113b5cbc84c", "historyId": "1d8e0740c42db1e65c856abfafa94fa2", "testCaseId": "6077c220bd96aaae36062a3875e7b04f", "fullName": "test_login.Test_001_Login#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "DESKTOP-HRBFHOS"}, {"name": "thread", "value": "12908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}